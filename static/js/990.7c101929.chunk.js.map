{"version":3,"file":"static/js/990.7c101929.chunk.js","mappings":"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","sources":["../node_modules/@chakra-ui/icons/src/Unlock.tsx","components/LoginForm/LoginForm.jsx","pages/LoginPage/LoginPage.jsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx"],"sourcesContent":["import { createIcon } from \"@chakra-ui/icon\"\n\nexport const UnlockIcon = createIcon({\n  d: \"M19.5,9.5h-.75V6.75A6.751,6.751,0,0,0,5.533,4.811a1.25,1.25,0,1,0,2.395.717A4.251,4.251,0,0,1,16.25,6.75V9a.5.5,0,0,1-.5.5H4.5a2,2,0,0,0-2,2V22a2,2,0,0,0,2,2h15a2,2,0,0,0,2-2V11.5A2,2,0,0,0,19.5,9.5Zm-9.5,6a2,2,0,1,1,3,1.723V19.5a1,1,0,0,1-2,0V17.223A1.994,1.994,0,0,1,10,15.5Z\",\n  displayName: \"UnlockIcon\",\n})\n","import { useDispatch } from 'react-redux';\nimport { Formik } from 'formik';\nimport { logIn } from 'redux/auth/operations';\nimport { Button, Input, FormControl, FormLabel, FormErrorMessage } from '@chakra-ui/react';\nimport { UnlockIcon } from '@chakra-ui/icons';\n\nexport const LoginForm = () => {\n    const dispatch = useDispatch();\n\n\n    return (\n        <Formik\n            initialValues={{\n            email: '',\n            password: '',\n            }}\n            \n        onSubmit={(values, actions) => {\n              const email = values.email;\n              const password = values.password\n              dispatch(logIn({email, password}));\n              actions.resetForm()\n      }}\n      >\n        {(formikProps) => (\n          <form onSubmit={formikProps.handleSubmit}>\n      <FormControl mb='40px' id=\"email\" isRequired>\n        <FormLabel fontFamily='mono' color='secondary.100' fontSize='18px'>Email</FormLabel>\n        <Input\n          type=\"email\"\n          name=\"email\"\n          value={formikProps.values.email}\n          onChange={formikProps.handleChange}\n          _focus={{\n          color: 'secondary.100',\n          borderColor: 'primary.100',\n        }}\n        />\n        <FormErrorMessage>{formikProps.errors.email}</FormErrorMessage>\n      </FormControl>\n\n      <FormControl mb='40px' id=\"password\" isRequired>\n        <FormLabel fontFamily='mono' color='secondary.100' fontSize='18px'>Password</FormLabel>\n        <Input\n          type=\"password\"\n          name=\"password\"\n          value={formikProps.values.password}\n          onChange={formikProps.handleChange}\n         _focus={{\n          color: 'secondary.100',\n          borderColor: 'primary.100',\n        }}\n        />\n        <FormErrorMessage>{formikProps.errors.password}</FormErrorMessage>\n      </FormControl>\n            \n        <Button color='secondary.50'\n            bg='primary.100'\n            type=\"submit\"\n            display='flex'\n            mx='auto'\n            _hover={{\n                color: 'secondary.50',\n                backgroundColor: 'primary.50',\n            }}> <UnlockIcon mr='10px'/>Log In</Button>\n          </form>\n        )}\n    </Formik>\n    )\n\n}","import { LoginForm } from \"components/LoginForm/LoginForm\";\nimport { Box, Text } from \"@chakra-ui/react\";\n\nexport default function Login() {\n    return (\n        <Box p='30px'>\n            <Text fontFamily='heading' color='primary.100' fontSize='22px' textAlign='center' mb='30px'>Please, login to view contacts</Text>\n            <LoginForm/>\n        </Box>\n    )\n}","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n"],"names":["UnlockIcon","createIcon","d","displayName","LoginForm","dispatch","useDispatch","_jsx","Formik","initialValues","email","password","onSubmit","values","actions","logIn","resetForm","children","formikProps","_jsxs","handleSubmit","FormControl","mb","id","isRequired","FormLabel","fontFamily","color","fontSize","Input","type","name","value","onChange","handleChange","_focus","borderColor","FormErrorMessage","errors","Button","bg","display","mx","_hover","backgroundColor","mr","Login","Box","p","Text","textAlign","options","_options$viewBox","viewBox","pathDefinition","_options$defaultProps","defaultProps","path","Children","Comp","forwardRef","props","ref","jsx","Icon","_objectSpread","length","fill"],"sourceRoot":""}